
MenloCNC High Performance Machine Controller.

3/20/2018

Why

There are open source machine control software like Grbl or LinuxCNC parallel port timing
generator, but these are low to moderate performance.

In addition the LinuxCNC is troubled by modern computers and their interrupts
due to system management interrupt (SMI), power management, speedstep, etc.

Embedded computers such as RaspberryPi also have the problem with ARM TrustZone,
intercepts for GPU, temperature.

At the higher performance end of the spectrum software techniques can not be
relied upon to generate high speed, accurate timings across multiple axises.

Architecture

Hardware Based Timing Generators

The machine control timings are generated by a set of per axis hardware based
timing generators on an FPGA. The "code" for the timing generators is written
in Verilog.

The timing generators take a set of "wide word" microcode instructions through
FIFO's that encode the timing, pulse count, and other options for each axis.
Since the timing generators share a common clock, each axis in in lock step at
the rate of the clock, which is 200ns or 5Mhz for the first version.

Real Time Processor

The timing generators must be kept up to date in real time with the cutting
program instructions in main memory. It needs to keep the timing generator
FIFO's filled, and deal with any conditions within.

Modern processors can not be relied upon in this case, so a purpose built
"Soft Processor" is implemented in the FPGA. It runs the Altera Nios II
instruction set which has C compiler support. There is no operating system, just
custom C code "on the metal".

Application Processors

The Altera Cyclone V FPGA used in the Teraasic NE-10 Standard has (2) 925Mhz
ARM cores which run an embedded Linux operating system. This embedded Linux
provides USB, ethernet, WiFI (using a USB WiFI Dongle) communications to
allow sending G code programs to the system.

In addition a VGA monitor, keyboard, and mouse may be attached and the
desktop version of the embedded Linux run. In this case a full CNC program
such as LinuxCNC may be run, and with the right add in driver, communicate
with the hardware timing engine.

The main task of the ARM processor cores in the machine control chain
is to receive the external G code from the USB bus, network, or flash key
and compile the G code to the microcode required by the timing engine.
This microcode is placed in a shared memory region for access by the Nios
II real time processor when a cutting program is being run.
