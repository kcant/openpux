
dweet notes.
11/15/2015

code/macgitrepos/Smartpux/nodejs/dweet

code/macgitrepos/Smartpux/nodejs/dweet/scripts

------------------------------------------------------------------------------
KEYWORDS: 

------------------------------------------------------------------------------
KEYWORDS: 

------------------------------------------------------------------------------
KEYWORDS: 

------------------------------------------------------------------------------
KEYWORDS: 

------------------------------------------------------------------------------
KEYWORDS: 

------------------------------------------------------------------------------
KEYWORDS: 

------------------------------------------------------------------------------
KEYWORDS: 

------------------------------------------------------------------------------
KEYWORDS: 

------------------------------------------------------------------------------
KEYWORDS: radio commands
KEYWORDS: gateway commands
KEYWORDS: radiogateway
KEYWORDS: radio gateway
KEYWORDS: radioserial
KEYWORDS: radio serial
11/15/2015

who  // show which channels are available
 gate0  /dev/ttyUSB0 // Linux/RaspberryPi
 radio0 radio0

switch radio0 // select radio0 as active to talk to remote sensor config

switch gate0 // select gate0 as active to talk to gateway config

dweet GETCONFIG=RADIOCHANNEL

shownmea
showdweet
settrace 10

------------------------------------------------------------------------------
KEYWORDS: TODO
11/16/2015

Add a radio status packet that is similar to radio receive data.
  -  up to 32 bytes in size similar to a receive packet
  -  own dweet code
  -  can ask for it at any time
  - send it on a periodic interval if no radio packets are received.
    - can be used to debug reception issues, radio interference, etc.
    - dump of all internal registers
    - important info such as collision count, carrier sense, etc.

Add JSON logging capabilities

Update lighthouseapp.js for logging

Update lighthouseapp.js for openpux client

  - Implement a dynamic loading of openpuxclient.js from the server
    to allow updates on the fly.

  - Means I need a version specific handler to do the load, etc.

Make dweet an app in openpux

Add parameterization to .dweet scripts so that one script can be
used for all different ports, configurations.

  - Make dweet scripts javascripts that are require() loaded

------------------------------------------------------------------------------
KEYWORDS: run
11/20/2015

cd code/macgitrepos/Smartpux/nodejs/dweet

scripts/promini_startradiogateway.sh

  loads SCRIPT=$HOME/Dropbox/code/macgitrepos/Smartpux/Arduino/MenloGateway/lighthouseapp.js

------------------------------------------------------------------------------
KEYWORDS: testdevice
KEYWORDS: dweettestdevice
11/18/2015

dweettestdevice.js

Simulates a device. Responds to some canned commands.

setupConversationalPackage

getConfigHandler

setConfigHandler

------------------------------------------------------------------------------
KEYWORDS: structure
11/17/2015

Top level is the arguments processing which process command line arguments.

It then creates a dweetconsole() for interactive operation against its
commands table.

dweetclient.js implements actual dweet against the supplied commands table
and parameters.

dweetclient.js drives the state machine for serial port/nmea 0183 events.

Other applications such as radio packet handling dervive from events emitted
by the main dweet processor.

------------------------------------------------------------------------------
KEYWORDS: launching
KEYWORDS: main
11/17/2015

dweet is launched form a shell script which loads lib/dweet.js and invokes launch()

// bin/dweet
#!/usr/bin/env node
// --debug-brk

require('../lib/dweet').launch();

dweet.js

  launch -> LaunchCommandLine()

    // gets process.argv, and creates Dweet() instance on stdout, stderr
    var args = process.argv.slice(1);
    var dweet = createInstance(console.log, console.error);
    dweet.RunCommandLineMain(args);


------------------------------------------------------------------------------
KEYWORDS: radio packet processing
11/17/2015

dweetclient.js

  openPort()

    DweetClient.prototype.openRadioSerial = function(portName, options, openCallback) {

    // register to receive radio packet dweets
    captured_this.dweetGatewayChannel.dweet.on('R', function(name, value, prefix) {

radioserial.js
  processPacketFromRadio()
    // (packet[0] & 0xC0) == 0x40 is radio serial without status (all data after header)
    // (packet[0] & 0xC0) == 0x80 is radio serial with status
    // If not a radioserial packet in packet[0]
        this.processNonRadioSerialPacket(packet);
            this.emit('unhandled_packet', packet);

------------------------------------------------------------------------------
KEYWORDS: apphandler
11/17/2015

Radio Serial is the handler for all packets from the remote radio
communicated over Dweet R + T NMEA sentences.

apphandler is invoked for unhandled packets

dweetclient.js

dweetpackage.js - invoked when radio serial does not handle a packet.

DweetClient.prototype.openRadioSerial = function(portName, options, openCallback) {

    //
    // Set the unhandled packet handler on RadioSerial
    //
    captured_this.dweetPacket = 
        captured_this.dweetPacketFactory.createInstance(captured_this.trace, captured_this.traceerror);

    //
    // Register LigthHouse application handler on DweetPacket
    //
    captured_this.dweetPacket.registerApplicationHandler(options.apphandler);

    captured_this.radioSerial.on ('unhandled_packet', function(packet) {

        // TODO: Improve what a channel means
        var channel = new Object();
        channel.portNumber = 0;

        captured_this.dweetPacket.processReceivedPacket(channel, packet);
    });

------------------------------------------------------------------------------
KEYWORDS: launch script
KEYWORDS: lighthouse launch script
11/17/2015

See

scripts/pi_promini_startradiogateway.sh

scripts/PiProMiniStartRadioGateway.dweet

------------------------------------------------------------------------------
KEYWORDS: install
11/15/2015

// First install serialport for dweet to use in its local project
cd nodejs/dweet

npm install serialport

// Now install dweet globally to make it available system wide
npm install nodejs/dweet -g

sudo npm install nodejs/dweet -g

------------------------------------------------------------------------------
KEYWORDS: Linux USB Serial Port
KEYWORDS: RaspberryPi USB Serial Port
11/28/2015

// Linux/RaspberryPi

/dev/ttyUSB0

------------------------------------------------------------------------------
KEYWORDS: 

dweet -verbose -traceerror -tracelog -console -script=DueStartRadioGateway.dweet /dev/tty.usbmodem1421

------------------------------------------------------------------------------
KEYWORDS: dweet weather station
KEYWORDS: dweetweather
KEYWORDS: lighthouse data
KEYWORDS: weatherstation data
KEYWORDS: sensor packet data
KEYWORDS: gateway sensor packet data
10/31/2015

Smartpux/private/smartpux.txt

//
// Plug in mini-gateway
//
// Find port with ls -l /dev/tty.usb* such as
//
// /dev/tty.usbserial-A10132OT
//
Dropbox/code/macgitrepos/Smartpux/nodejs/dweet
scripts/startweathergateway.sh

Dropbox/code/macgitrepos/node_js/examples/radioserial/radioserial.js

  RadioSerial.prototype.processNonRadioSerialPacket = function(packet) {

------------------------------------------------------------------------------
KEYWORDS: dweet.txt
KEYWORDS: dweet
KEYWORDS: Dweet
08/18/2015

// Current development directory
Dropbox/code/macgitrepos/Smartpux/nodejs/dweet

Dropbox/code/macgitrepos/Smartpux/nodejs/clientofdweet

------------------------------------------------------------------------------
KEYWORDS: Gateway
KEYWORDS: MenloGateway
KEYWORDS: Menlo Gateway
KEYWORDS: dweet
KEYWORDS: Dweet
09/03/2015

This is the Dweet gateway with customization files for the lighthouse, etc.

code/macgitrepos/Smartpux/Arduino/MenloGateway
code/macgitrepos/Smartpux/Arduino/MenloGateway/readme.txt

code/macgitrepos/Smartpux/Arduino/MenloGateway/scripts/promini_startradiogatway.sh

------------------------------------------------------------------------------
KEYWORDS: dweet
KEYWORDS: radio gateway
KEYWORDS: radiogateway
05/31/2015

Dropbox/code/Smartpux/nodejs/dweet/scripts

Watch open commands in the .dweet script.

You can open a port from the command line, as a shell option, or from
the .dweet script.

------------------------------------------------------------------------------
KEYWORDS: dweet
KEYWORDS: R
KEYWORDS: Radio packet receive dweets
KEYWORDS: Dweet Receive Radio Packet
05/23/2015

Dropbox/code/Smartpux/nodejs/dweet/lib

usermain.js
  dweet.dweetMain()

dweet.js
  dweetMain()
    dweetConsole.interactiveConsole()
      openDweetClient()
       // dweetclient.js
       var client = dweetClientFactory.createInstance(trace, traceerror, prefix);

dweethandler.js
  DweetHandler.prototype.processCommandAsEvent = function(o, command, nv) {

    this.emit("receive", "receive", null, command, o);

    var cr = this.splitCommandEventReply(nv.name);

    this.emit(cr.event, nv.name, nv.value, o.prefix, o);

Smartpux/dweet/lib/dweetclient.js, line 358

    //
    // Register to receive radio Dweets which contain packets
    // for RadioSerial.
    //
    captured_this.dweetGatewayChannel.dweet.on('R', function(name, value, prefix) {

      var binaryBuffer = myutil.asciiHexStringToBinaryBuffer(value);
      captured_this.radioSerial.processPacketFromRadio(binaryBuffer, function(error) {

      code/node_js/examples/radioserial/radioserial.js

        RadioSerial.prototype.processPacketFromRadio = function(packet, callback) {

          this.processNonRadioSerialPacket(packet);

          RadioSerial.prototype.processNonRadioSerialPacket = function(packet) {

            var sensorData = this.processLightHouseData(packet);

            this.translateLightHouseData(sensorData);

            this.displayLightHouseData(packet, sensorData);

            this.displayWeatherData(packet, sensorData);

------------------------------------------------------------------------------
KEYWORDS: dweet
KEYWORDS: node.js
KEYWORDS: node_js
KEYWORDS: trace
KEYWORDS: traceerror
KEYWORDS: trace
KEYWORDS: g_traceerror
KEYWORDS: g_tracing
KEYWORDS: verbose
KEYWORDS: -verbose
KEYWORDS: Dweet console launch
KEYWORDS: Dweet console debug
KEYWORDS: Dweet console verbose
KEYWORDS: Dweet console trace
KEYWORDS: Dweet console traceerror
05/23/20153

code/macgitrepos/Smartpux/nodejs/dweet

// To run
code/macgitrepos/Smartpux/nodejs/dweet

dweet -verbose -console -script=DueStartRadioGateway.dweet /dev/tty.usbmodem1421

dweet -verbose -traceerror -console -script=DueStartRadioGateway.dweet /dev/tty.usbmodem1421

dweet -verbose -traceerror -tracelog -console -script=DueStartRadioGateway.dweet /dev/tty.usbmodem1421

dweet/lib/usermain.js

  function userMain(config, args) {

    // setup tracing
    config.verbose = argsTable["verbose"].value;

    if (argsTable["verbose"].value != false) {
        console.log("verbose specified");
        g_trace = true;
        g_traceerror = true;
    }

    if (argsTable["tracelog"].value != false) {
        g_trace = true;
    }

    if (argsTable["traceerror"].value != false) {
        g_traceerror = true;
    }

    dweetArgs.trace = g_trace;
    dweetArgs.traceerror = g_traceerror;

    dweet.dweetMain(dweetArgs);

      dweet/lib/dweet.js

        dweetMain()

          g_trace = args.trace;
          g_traceerror = args.traceerror;

          context.trace = g_trace;
          context.traceerror = g_traceerror;

          dweetConsole.interactiveConsole(context, function(error) {
            process.exit(1);
          });

            dweet/lib/dweetconsole.js

              DweetConsole.prototype.interactiveConsole = function(context, callback) {

                openDweetClient(context.defaultPortName, context.tag, context.defaultPrefix,
	          options, context.trace, context.traceerror, function(error, dweetClient) {

                   function openDweetClient(portName, tag, prefix, options, trace, traceerror, callback) {

                     var client = dweetClientFactory.createInstance(trace, traceerror, prefix);

                       dweet/lib/dweetclient.js

                         function DweetClient(trace, traceerror, prefix) {

                           this.trace = trace;
                           this.traceerrorValue = traceerror;

------------------------------------------------------------------------------
KEYWORDS: DweetSerialChannel
05/04/2015

DweetSerialChannel - Serial handler

  - works for *both* serial port and MenloRadioSerial due to uniform
    port* contract.

------------------------------------------------------------------------------
KEYWORDS: Example of Dweet event driven handler is DweetRadio

Example of Dweet event driven handler is DweetRadio

LightHouse.ino is the current DweetLightHouse under development.

  code/macgitrepos/Smartpux/Arduino/LightHouse/LightHouse.ino

------------------------------------------------------------------------------
KEYWORDS: dweet weather station
KEYWORDS: dweetweather
KEYWORDS: lighthouse data
KEYWORDS: weatherstation data
KEYWORDS: sensor packet data
KEYWORDS: gateway sensor packet data
10/31/2015

Dropbox/code/macgitrepos/Smartpux/nodejs/dweet

//
// Plug in mini-gateway
//
// Find port with ls -l /dev/tty.usb* such as
//
// /dev/tty.usbserial-A10132OT
//
Dropbox/code/macgitrepos/Smartpux/nodejs/dweet
scripts/startweathergateway.sh

Dropbox/code/macgitrepos/node_js/examples/radioserial/radioserial.js

  RadioSerial.prototype.processNonRadioSerialPacket = function(packet) {

------------------------------------------------------------------------------
KEYWORDS: workflow.txt
12/27/2015

#
# Run dweet
#
# Launch scripts are in scripts/...
#

dweet

dweet -verbose -console -script=DueStartRadioGateway.dweet /dev/tty.usbmodem1421

dweet -verbose -traceerror -console -script=DueStartRadioGateway.dweet /dev/tty.usbmodem1421

dweet -verbose -traceerror -tracelog -console -script=DueStartRadioGateway.dweet /dev/tty.usbmodem1421

# *** WARNING ***
#
# Do not edit files in lib\*.js that are copied by
# copybom.sh below. They will be overwritten.
#
# Edit them in their original source locations.
#
# These are library/infrastructure files re-used among
# multiple projects.
#
# *** WARNING ***

# Pull from libraries into the release
scripts/copybom.sh

# Refresh after development to place it in /usr/loca/bin/dweet
sudo npm install . -g

# Get node serialport npm first time
sudo npm install serialport -g

# Debugging
dweet -verbose -console -script=DueStartRadioGateway.dweet /dev/tty.usbmodem1421

# See roadmap.txt for various notes and code paths

------------------------------------------------------------------------------
KEYWORDS: readme.txt
12/27/2015


10/31/2015

dweet - Configuration and Gateway Utility for IoT sensors built
       using the MenoFramework.

install:

 npm install dweet -g

 // from current directory;
 npm install . -g

 node serialport is also required:

 // -g is not needed as its used locally
 npm install serialport

run:

------------------------------------------------------------------------------
KEYWORDS: 

------------------------------------------------------------------------------
KEYWORDS: 

------------------------------------------------------------------------------
KEYWORDS: 

------------------------------------------------------------------------------
KEYWORDS: 

