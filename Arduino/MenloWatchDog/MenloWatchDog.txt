
03/08/2018

                 *** MenloWatchdog ***

              Watchdog for IoT deployments

Many higher level IoT deployments such as RaspberryPi's, Particle Photons,
etc. have a tendency to "hang" when deployed for months at a time, especially
in light of outdoor conditions.

This watchdog goes back to basics and uses a real microcontroller, the
AtMega328 which has on board watchdog and voltage monitoring to stay
alive itself and monitor your other, frequently failing higher level IoT
devices.

The AtMega328 is the baseline processor of an Arduino Uno, but is available
in the Arduino Pro Mini which is around $10 for an official one, or $4.00
clones on Ebay. This is a small sized board which can be purchased to operate
on 3.3V or 5.0V depending on the power available from your larger device.

It's 8-10ma current draw and on board sleeping means it can power off of
the accessory pin of the larger project, and not use much power since
its mostly sleeping.

It can be configured over Dweet from its factory defaults, with the
settings stored in the EEPROM.

Specification:

 Defaults may be changed with DWEET commands and are stored in EEPROM.

 Watchdog timeout interval - 5 minutes
   - enough time to boot a RaspberryPi, etc.

 Reset Pulse Time - 200ms

 Power Cycle Off Time - 5 seconds

 Watchdog heart beat light flash is ON.

 Digital Pin 3 is used for watchdog input as an interrupt pin.

 Interrupt on rising and falling edge.

 If a complete high/low/high cycle occurs within the watchdog interval,
 the watchdog is reset.

 If a Dweet watchdog reset message arrives within the watchdog interval,
 the watchdog is reset.

 Watchdog initiated resets are recorded in the EEPROM and can be read
 from DWEET's.

   D4 - Floating HIGH when operating

     - Pulled LOW for reset period, default 200ms.

 SwitchDocLabs USB Power Switch Control

 Connect to J4 D8/D9 on MiniProLP to J3 on SwitchDocLabs USB Power Control.

  - pin 4 is GND
  - pin 3 is VCC
  - pin 2 is ENABLE  (Sig1, D9) - When High, disable LIPO_IN (JP1) signal.
  - pin 1 is CONTROL (Sig0, D8) - When High, power on, when low, power off.

   D13 - Default light pin. Active when performing watchdog reset and
         power cycle.

Design/Architecture:

 Relies on AtMega built in purpose built reliable microcontroller functions:

 - On board watchdog
    - resets AtMega328 firmware if an issue.
    - Watchdog to watch the watchdog.

 - On board brownout detection.

 - On board low power sleep modes.

 - On board wake from interrupt/pin transition.

Dweets:

MenloFramework uses a NMEA 0183 based protocol for configuration
and runtime communications since its based plain ASCII 7 bit text
on a basic serial port stream and supports checksums for data/message validity.

The node.js utility "dweet" can be installed to communicate with
the firmware on the board for configuration and handle the low level
protocol details.

You can also send the configuration commands manually through any
serial terminal such as the Arduino IDE's serial monitor.

If sending Dweets directly through a serial terminal such as the Arduino IDE
you must include the NMEA 0183 header "$PDWT," and checksum "*00". In order
to not have to hand code these checksums you can turn off the NMEA checksum
validation on the device. Note that the dweet utility automatically performs
these calculations if used.

Arduino Serial Monitor Instructions:

Run Arduino, upload code, open Tools, Serial Monitor
  - Select "Both NL & CR" in lower right menu

# Turn off checksums
$PDWT,SETSTATE=NOCHECKSUM:01*24

Success Reply:
$PDWT,SETSTATE_REPLY=NOCHECKSUM:01*29

At this point you can send the messages directly through the serial
terminal pre-pending "$PDWT," and adding "*00" to the end to make
it a valid NMEA 0183 message.

Example:

SETSTATE=WATCHDOGPOKE:00000001 => $PDWT,SETSTATE=WATCHDOGPOKE:00000001*00

A handy way to see what the checksum should be is to use dweet
in console mode showing the protocol strings.

dweet /dev/port

# show NMEA 0183 exchanges
shownmea

dweet SETSTATE=WATCHDOGPOKE:00000001

> dweet SETSTATE=WATCHDOGPOKE:00000001
NMEA>:$PDWT,SETSTATE=WATCHDOGPOKE:00000001*3C
 DBG: MenloWatchDog setting WatchDog Poke 
NMEA<:$PDBG,PRINT=MenloWatchDog setting WatchDog Poke *53(checkSumOK)
00000001
> NMEA<:$PDWT,SETSTATE_REPLY=WATCHDOGPOKE:00000001*31(checkSumOK)

Now you can regularly send the following string from a RaspberryPi
to poke the watchdog by just sending it out the serial port
with Python, Node.js or C code.

$PDWT,SETSTATE=WATCHDOGPOKE:00000001*3C

Note: You must hold the port open if using an FTDI cable or
Arduino with reset on DTR otherwise everything you open the port
you reset your watchdog, and then it will no longer be a watchdog.

In deployment you must disconnect the DTR watchdog in these
configurations. This is not a problem if you use the I/O
port high-low-high transition method.

----

SETCONFIG writes the configuration to EEPROM
so its available after power on/reset.

SETSTATE modifies runtime operating state that is lost after
a power power cycle/reset.

// Reset watchdog counter
SETSTATE=WATCHDOGPOKE:00000001

// 8 hex digits for seconds
SETSTATE=WATCHDOGTIMEOUT:0000012C
SETCONFIG=WATCHDOGTIMEOUT:0000012C

// Reset interval milliseconds as 8 hex digits
// if less than 10 ms selected, goes to default 200 ms.
SETSTATE=WATCHDOGRESET:000000C8
SETCONFIG=WATCHDOGRESET:000000C8

// Power off interval milliseconds as 8 hex digits
// if less than 500 ms selected, goes to default 5 seconds.
SETSTATE=WATCHDOGPOWER:00001388
SETCONFIG=WATCHDOGPOWER:00001388

// Watchdog indicator light flash when counter reset is received.
// ON, OFF
SETSTATE=WATCHDOGIND:00000001
SETCONFIG=WATCHDOGIND:00000001

// Return number of watchdog resets in the EEPROM 8 hex digits
GETSTATE=WATCHDOGRESETS

// Clears the counter of watchdog resets in the EEPROM
// A value other than zero is rejected.
SETCONFIG=WATCHDOGRESETS:00000000

Building:

Load Ardunino IDE.

  Select Arduino Pro Mini (usual watchdog deployment).

   - select 3.3V or 5V (different clock rates).

  Can select Arduino Uno for testing or larger deployments.

Load project, Arduino/MenloWatchdog/MenloWatchdog.ino
  - ensure directory name and project.ino name *exactly match in case*
  - Arduino IDE 1.6.x complains otherwise.
  - Set Arduino Library path to Arduino/Libaries for MenloFramework classes.

Build in the IDE and upload to the board.

The initial defaults will be set to the EEPROM on first time
power up since the EEPROM checksum will be invalid.

You can use the scripts/ directory to program custom configuration
using the Menlo "dweet" node.js utlity.


